/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.rdani2005.yawa.kafka.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AccountAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2117367463681037996L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AccountAvroModel\",\"namespace\":\"com.rdani2005.yawa.kafka.avro.model\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"accountNumber\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"initialAmount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"actualAmount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<AccountAvroModel> ENCODER =
      new BinaryMessageEncoder<AccountAvroModel>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AccountAvroModel> DECODER =
      new BinaryMessageDecoder<AccountAvroModel>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AccountAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AccountAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AccountAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AccountAvroModel>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AccountAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AccountAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AccountAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AccountAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String id;
  private java.lang.String customerId;
  private java.lang.String accountNumber;
  private java.math.BigDecimal initialAmount;
  private java.math.BigDecimal actualAmount;
  private java.time.Instant createdAt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AccountAvroModel() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param customerId The new value for customerId
   * @param accountNumber The new value for accountNumber
   * @param initialAmount The new value for initialAmount
   * @param actualAmount The new value for actualAmount
   * @param createdAt The new value for createdAt
   */
  public AccountAvroModel(java.lang.String id, java.lang.String customerId, java.lang.String accountNumber, java.math.BigDecimal initialAmount, java.math.BigDecimal actualAmount, java.time.Instant createdAt) {
    this.id = id;
    this.customerId = customerId;
    this.accountNumber = accountNumber;
    this.initialAmount = initialAmount;
    this.actualAmount = actualAmount;
    this.createdAt = createdAt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return customerId;
    case 2: return accountNumber;
    case 3: return initialAmount;
    case 4: return actualAmount;
    case 5: return createdAt;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      new org.apache.avro.Conversions.DecimalConversion(),
      new org.apache.avro.Conversions.DecimalConversion(),
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = value$ != null ? value$.toString() : null; break;
    case 1: customerId = value$ != null ? value$.toString() : null; break;
    case 2: accountNumber = value$ != null ? value$.toString() : null; break;
    case 3: initialAmount = (java.math.BigDecimal)value$; break;
    case 4: actualAmount = (java.math.BigDecimal)value$; break;
    case 5: createdAt = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'customerId' field.
   * @return The value of the 'customerId' field.
   */
  public java.lang.String getCustomerId() {
    return customerId;
  }


  /**
   * Sets the value of the 'customerId' field.
   * @param value the value to set.
   */
  public void setCustomerId(java.lang.String value) {
    this.customerId = value;
  }

  /**
   * Gets the value of the 'accountNumber' field.
   * @return The value of the 'accountNumber' field.
   */
  public java.lang.String getAccountNumber() {
    return accountNumber;
  }


  /**
   * Sets the value of the 'accountNumber' field.
   * @param value the value to set.
   */
  public void setAccountNumber(java.lang.String value) {
    this.accountNumber = value;
  }

  /**
   * Gets the value of the 'initialAmount' field.
   * @return The value of the 'initialAmount' field.
   */
  public java.math.BigDecimal getInitialAmount() {
    return initialAmount;
  }


  /**
   * Sets the value of the 'initialAmount' field.
   * @param value the value to set.
   */
  public void setInitialAmount(java.math.BigDecimal value) {
    this.initialAmount = value;
  }

  /**
   * Gets the value of the 'actualAmount' field.
   * @return The value of the 'actualAmount' field.
   */
  public java.math.BigDecimal getActualAmount() {
    return actualAmount;
  }


  /**
   * Sets the value of the 'actualAmount' field.
   * @param value the value to set.
   */
  public void setActualAmount(java.math.BigDecimal value) {
    this.actualAmount = value;
  }

  /**
   * Gets the value of the 'createdAt' field.
   * @return The value of the 'createdAt' field.
   */
  public java.time.Instant getCreatedAt() {
    return createdAt;
  }


  /**
   * Sets the value of the 'createdAt' field.
   * @param value the value to set.
   */
  public void setCreatedAt(java.time.Instant value) {
    this.createdAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Creates a new AccountAvroModel RecordBuilder.
   * @return A new AccountAvroModel RecordBuilder
   */
  public static com.rdani2005.yawa.kafka.avro.model.AccountAvroModel.Builder newBuilder() {
    return new com.rdani2005.yawa.kafka.avro.model.AccountAvroModel.Builder();
  }

  /**
   * Creates a new AccountAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AccountAvroModel RecordBuilder
   */
  public static com.rdani2005.yawa.kafka.avro.model.AccountAvroModel.Builder newBuilder(com.rdani2005.yawa.kafka.avro.model.AccountAvroModel.Builder other) {
    if (other == null) {
      return new com.rdani2005.yawa.kafka.avro.model.AccountAvroModel.Builder();
    } else {
      return new com.rdani2005.yawa.kafka.avro.model.AccountAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new AccountAvroModel RecordBuilder by copying an existing AccountAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new AccountAvroModel RecordBuilder
   */
  public static com.rdani2005.yawa.kafka.avro.model.AccountAvroModel.Builder newBuilder(com.rdani2005.yawa.kafka.avro.model.AccountAvroModel other) {
    if (other == null) {
      return new com.rdani2005.yawa.kafka.avro.model.AccountAvroModel.Builder();
    } else {
      return new com.rdani2005.yawa.kafka.avro.model.AccountAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for AccountAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AccountAvroModel>
    implements org.apache.avro.data.RecordBuilder<AccountAvroModel> {

    private java.lang.String id;
    private java.lang.String customerId;
    private java.lang.String accountNumber;
    private java.math.BigDecimal initialAmount;
    private java.math.BigDecimal actualAmount;
    private java.time.Instant createdAt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.rdani2005.yawa.kafka.avro.model.AccountAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.customerId)) {
        this.customerId = data().deepCopy(fields()[1].schema(), other.customerId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.accountNumber)) {
        this.accountNumber = data().deepCopy(fields()[2].schema(), other.accountNumber);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.initialAmount)) {
        this.initialAmount = data().deepCopy(fields()[3].schema(), other.initialAmount);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.actualAmount)) {
        this.actualAmount = data().deepCopy(fields()[4].schema(), other.actualAmount);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[5].schema(), other.createdAt);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing AccountAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(com.rdani2005.yawa.kafka.avro.model.AccountAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customerId)) {
        this.customerId = data().deepCopy(fields()[1].schema(), other.customerId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.accountNumber)) {
        this.accountNumber = data().deepCopy(fields()[2].schema(), other.accountNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.initialAmount)) {
        this.initialAmount = data().deepCopy(fields()[3].schema(), other.initialAmount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.actualAmount)) {
        this.actualAmount = data().deepCopy(fields()[4].schema(), other.actualAmount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[5].schema(), other.createdAt);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.rdani2005.yawa.kafka.avro.model.AccountAvroModel.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.rdani2005.yawa.kafka.avro.model.AccountAvroModel.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerId' field.
      * @return The value.
      */
    public java.lang.String getCustomerId() {
      return customerId;
    }


    /**
      * Sets the value of the 'customerId' field.
      * @param value The value of 'customerId'.
      * @return This builder.
      */
    public com.rdani2005.yawa.kafka.avro.model.AccountAvroModel.Builder setCustomerId(java.lang.String value) {
      validate(fields()[1], value);
      this.customerId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'customerId' field has been set.
      * @return True if the 'customerId' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'customerId' field.
      * @return This builder.
      */
    public com.rdani2005.yawa.kafka.avro.model.AccountAvroModel.Builder clearCustomerId() {
      customerId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'accountNumber' field.
      * @return The value.
      */
    public java.lang.String getAccountNumber() {
      return accountNumber;
    }


    /**
      * Sets the value of the 'accountNumber' field.
      * @param value The value of 'accountNumber'.
      * @return This builder.
      */
    public com.rdani2005.yawa.kafka.avro.model.AccountAvroModel.Builder setAccountNumber(java.lang.String value) {
      validate(fields()[2], value);
      this.accountNumber = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'accountNumber' field has been set.
      * @return True if the 'accountNumber' field has been set, false otherwise.
      */
    public boolean hasAccountNumber() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'accountNumber' field.
      * @return This builder.
      */
    public com.rdani2005.yawa.kafka.avro.model.AccountAvroModel.Builder clearAccountNumber() {
      accountNumber = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'initialAmount' field.
      * @return The value.
      */
    public java.math.BigDecimal getInitialAmount() {
      return initialAmount;
    }


    /**
      * Sets the value of the 'initialAmount' field.
      * @param value The value of 'initialAmount'.
      * @return This builder.
      */
    public com.rdani2005.yawa.kafka.avro.model.AccountAvroModel.Builder setInitialAmount(java.math.BigDecimal value) {
      validate(fields()[3], value);
      this.initialAmount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'initialAmount' field has been set.
      * @return True if the 'initialAmount' field has been set, false otherwise.
      */
    public boolean hasInitialAmount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'initialAmount' field.
      * @return This builder.
      */
    public com.rdani2005.yawa.kafka.avro.model.AccountAvroModel.Builder clearInitialAmount() {
      initialAmount = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'actualAmount' field.
      * @return The value.
      */
    public java.math.BigDecimal getActualAmount() {
      return actualAmount;
    }


    /**
      * Sets the value of the 'actualAmount' field.
      * @param value The value of 'actualAmount'.
      * @return This builder.
      */
    public com.rdani2005.yawa.kafka.avro.model.AccountAvroModel.Builder setActualAmount(java.math.BigDecimal value) {
      validate(fields()[4], value);
      this.actualAmount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'actualAmount' field has been set.
      * @return True if the 'actualAmount' field has been set, false otherwise.
      */
    public boolean hasActualAmount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'actualAmount' field.
      * @return This builder.
      */
    public com.rdani2005.yawa.kafka.avro.model.AccountAvroModel.Builder clearActualAmount() {
      actualAmount = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdAt' field.
      * @return The value.
      */
    public java.time.Instant getCreatedAt() {
      return createdAt;
    }


    /**
      * Sets the value of the 'createdAt' field.
      * @param value The value of 'createdAt'.
      * @return This builder.
      */
    public com.rdani2005.yawa.kafka.avro.model.AccountAvroModel.Builder setCreatedAt(java.time.Instant value) {
      validate(fields()[5], value);
      this.createdAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'createdAt' field has been set.
      * @return True if the 'createdAt' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'createdAt' field.
      * @return This builder.
      */
    public com.rdani2005.yawa.kafka.avro.model.AccountAvroModel.Builder clearCreatedAt() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AccountAvroModel build() {
      try {
        AccountAvroModel record = new AccountAvroModel();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.customerId = fieldSetFlags()[1] ? this.customerId : (java.lang.String) defaultValue(fields()[1]);
        record.accountNumber = fieldSetFlags()[2] ? this.accountNumber : (java.lang.String) defaultValue(fields()[2]);
        record.initialAmount = fieldSetFlags()[3] ? this.initialAmount : (java.math.BigDecimal) defaultValue(fields()[3]);
        record.actualAmount = fieldSetFlags()[4] ? this.actualAmount : (java.math.BigDecimal) defaultValue(fields()[4]);
        record.createdAt = fieldSetFlags()[5] ? this.createdAt : (java.time.Instant) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AccountAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<AccountAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AccountAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<AccountAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










